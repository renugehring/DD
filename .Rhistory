sapply(paste("C:/Data Science Toolbox/Data/rprog_data_specdata/Test/Temp_",
1:2, ".csv", sep=""), read.csv)
sapply(paste("C:/Data Science Toolbox/Data/rprog_data_specdata/specdata/",
100:200, ".csv", sep=""), read.csv)
DataAll <- sapply(paste("C:/Data Science Toolbox/Data
/rprog_data_specdata/specdata/",
100:200, ".csv", sep=""), read.csv)
DataAll <- sapply(paste("C:/Data Science Toolbox/Data/rprog_data_specdata/specdata/",
100:102, ".csv", sep=""), read.csv)
head(DataAll)
head(DataAll)
x <- c("a", "b", "c", "d")
for(i in seq_along(x)) {
y<-x[i]
y
}
DataAll <- sapply(paste("C:/Data Science Toolbox/Data/rprog_data_specdata/specdata/",
100:102, ".csv", sep=""), read.csv, header=TRUE)
head(DataAll)
?list.files
fileList <- list.files(path="C:/Data Science Toolbox/Data/rprog_data_specdata/specdata/", pattern=".csv")
fileList
sapply(fileList, read.csv, header=TRUE)
fileList
fileList <- list.files(path="C:/Data Science Toolbox/Data/rprog_data_specdata/specdata/", pattern=".csv")
for(i in seq_along(fileList)) {
data=read.csv("fileList[i]",header=TRUE)
}
data_dir <- paste(getwd(),dir,sep = "/")
a=available.packages()
head(a,10)
install.packages("KernSmooth")
library(KernSmooth)
printmessage=function(x) {
if (x>0)
print ("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(10)
printmessage(-1)
printmessage=function(x) {
if (x>0)
print ("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(-1)
# write three functions
?rep
x=c(2,3)
y=rep(x,4)
y2=solve(y)
# write three functions
x=c(2,3)
y=c(1,2)
y1=rowbind(x,y)
y2=solve(y1)
# write three functions
x=c(2,3)
y=c(1,2)
y1=rbind(x,y)
y2=solve(y1)
y1
y2
y1*y2
?solve
x=c(1,1)
y=c(1,2)
y1=rbind(x,y)
y2=solve(y1)
y1
y2
y1*y2
x=c(1,1)
y=c(1,2)
y1=rbind(x,y)
y2=solve(y1)
y1
y2
y1%*% y2
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x=c(1,1)
y=c(1,2)
Renumatrix=rbind(x,y)
cachesolve(Renumatrix)
cacheSolve(Renumatrix)
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
x=c(1,2)
y=c(3,4)
z=rbind(x,y)
z
zinverse=solve(z)
zinverse
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
set.seed(1110201)
r = rnorm(1000000)
temp = makeVector(r)
cachemean(temp)
cachemean(temp)
temp = makeVector(r)
start.time = Sys.time()
cachemean(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cachemean(temp)
dur = Sys.time() - start.time
print(dur)
set.seed(1110201)
r = rnorm(100000000)
temp = makeVector(r)
start.time = Sys.time()
cachemean(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cachemean(temp)
dur = Sys.time() - start.time
print(dur)
## Two functions first makeCacheMatrix and then cacheSolve
# Comments
# returns a list containing functions to get the matrix,
# set the matrix, get the inverse, set the inverse
# input to cacheSolve function
makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
# return: inverse of the original matrix input to makeCacheMatrix()
cacheSolve <- function(x, ...) {
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
gettidy <- function(){
library(data.table)
# load test data
subject_test = read.table("UCI HAR Dataset/test/subject_test.txt")
data_test = read.table("UCI HAR Dataset/test/X_test.txt")
act_test = read.table("UCI HAR Dataset/test/Y_test.txt")
# load training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
data_train = read.table("UCI HAR Dataset/train/X_train.txt")
act_train = read.table("UCI HAR Dataset/train/Y_train.txt")
# load lookup information
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureId", "featureLabel"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityId", "activityLabel"))
activities$activityLabel <- gsub("_", "", as.character(activities$activityLabel))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureLabel)
# row bind test and training data and then name them
subject <- rbind(subject_test, subject_train)
names(subject) <- "subjectId"
data <- rbind(data_test, data_train)
data <- data[, includedFeatures]
names(data) <- gsub("\\(|\\)", "", features$featureLabel[includedFeatures])
act <- rbind(act_test, act_train)
names(act) = "activityId"
activitytemp=merge(act, activities, by="activityId")
activity <- activitytemp$activityLabel
# column bind data frames of different columns to form one data table
data2 <- cbind(subject, data, activity)
write.table(data2, "tidy_data_merged.txt")
# create a dataset grouped by subject and activity
# after applying standard deviation and average calculations
dataDT <- data.table(data2)
calculatedData<- dataDT[, lapply(.SD, mean), by=c("subjectId", "activity")]
write.table(calculatedData, "tidy_data_calculated.txt")
}
gettidy
gettidy()
set.seed(1234)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(data=NA, nrow=0,ncol=SampleSize)
View(data)
View(data)
for (i in 1 : num.Trials) {
data = rbind(data, rexp(SampleSize, .lambda))
}
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, .lambda))
}
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
data=data.frame(data)
View(data)
View(data)
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
data=data.frame(data)
View(data)
View(data)
means=data %>%
summarize_each(funs(mean))
means=summarise_each(data,funs(mean))
means=colMeans(data)
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
variance=var(data)
variance=var(as.vector(data))
View(variance)
View(variance)
variance=var(as.vector(data))
View(variance)
View(variance)
set.seed(1234)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
#data=data.frame(data)
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
variance=var(as.vector(data))
set.seed(1234)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
variance=var(as.vector(data))
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
set.seed(1234)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
data=data.frame(data)
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
View(data)
View(data)
set.seed(1234)
SampleSize=40
numTrials=10000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
variance=var(as.vector(data))
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
set.seed(68678678)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
variance=var(as.vector(data))
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
set.seed(68678678)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=colMeans(data)
overallmean=mean(meanofmeans)
overallmean
variance=var(as.vector(data))
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
set.seed(68678678)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=rowMeans(data)
overallmean=mean(meanofmeans)
overallmean
variance=var(as.vector(data))
hist(meanofmeans,xlab="Sample Means", main="Histogram of Sample Means")
library(datasets)
data("ToothGrowth")
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
Growth=ToothGrowth %>%
group_by(supp,dose) %>%
summarise(growth=mean(len))
install.packages("magrittr")
Growth=ToothGrowth %>%
group_by(supp,dose) %>%
summarise(growth=mean(len))
library(dplyr)
data("ToothGrowth")
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
Growth=ToothGrowth %>%
group_by(supp,dose) %>%
summarise(growth=mean(len))
View(Growth)
View(Growth)
OJ=ToothGrowth$len(ToothGrowth$supp=="OJ")
VC=ToothGrowth$len(ToothGrowth$supp=="VC")
t.test(OJ,VC, var.equal=FALSE)
set.seed(68678678)
SampleSize=40
numTrials=1000
lambda=.2
data=matrix(data=NA, nrow=0,ncol=SampleSize)
for (i in 1 : numTrials) {
data = rbind(data, rexp(SampleSize, lambda))
}
meanofmeans=rowMeans(data)
overallmean=mean(meanofmeans)
overallmean
variance2=var(meanofmeans)
#assignment
str(mtcars)
?mtcars
mtcars
#explore data
with(mtcars, tapply(mpg,am,mean))
boxplot(mpg~am,data=mtcars, main="Car Milage Data",
xlab="Automatic/Manual", ylab="Miles Per Gallon")
# transform data
mtcars=mutate(mtcars,
am2=factor(am),
cyl2=factor(cyl),
gear2=factor(gear)
)
library(dplyr)
# transform data
mtcars=mutate(mtcars,
am2=factor(am),
cyl2=factor(cyl),
gear2=factor(gear)
)
# linear regression
fit=lm(mpg ~ wt + cyl2+ am2+ gear2+ hp, data = mtcars)
summary(fit)
fit1=lm(mpg ~ wt +am2+hp, data = mtcars)
summary(fit1)
#interaction effect
fit2=lm(mpg ~ wt*am2+hp, data = mtcars)
summary(fit2)
anova(fit1, fit2, fit)
plot(predict(fit2), resid(fit2), pch = '.')
#confidence intervals
confint(fit2)
with(mtcars, tapply(mpg,am,mean))
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(devtools)
#install_github('slidify', 'ramnathv')
#install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd ("C:/Data Science/DataProducts")
setwd ("C:/Data Science/DataProducts/first_deck")
setwd ("C:/Data Science/DataProducts/first_deck")
slidify('index.Rmd')
slidify('index.Rmd')
setwd ("C:/Data Science/DataProducts/first_deck")
slidify('index.Rmd')
setwd ("C:/Data Science/DataProducts/first_deck")
slidify('index.Rmd')
setwd ("C:/Data Science/DataProducts/first_deck")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
